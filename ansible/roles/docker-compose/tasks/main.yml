# ansible/roles/docker-compose/tasks/main.yml
---
- name: Ensure apt cache is up to date
  ansible.builtin.apt:
    update_cache: yes

- name: Install Docker Compose plugin via apt
  ansible.builtin.apt:
    name: docker-compose-plugin
    state: present
  register: dc_apt
  failed_when: false

- name: Ensure python3-pip is installed (for pip fallback & venv support)
  ansible.builtin.apt:
    name: python3-pip
    state: present

- name: Install distro Docker SDK & requests packages
  ansible.builtin.apt:
    name:
      - python3-docker
      - python3-requests
    state: present

- name: Install legacy docker-compose via pip3 if plugin not available
  ansible.builtin.pip:
    name: docker-compose
    executable: pip3
  when: dc_apt.failed

- name: Check if override file exists
  ansible.builtin.stat:
    path: "{{ homelab_dest }}/docker-compose.override.yml"
  register: override_file_stat

- name: Build list of compose files
  ansible.builtin.set_fact:
    compose_files: >-
      {{
        [ 'docker-compose.yml' ]
        + ( override_file_stat.stat.exists | bool
            and [ 'docker-compose.override.yml' ] or [] )
      }}

- name: Ensure .env file is configured on the server from template
  ansible.builtin.template:
    src: .env.j2
    dest: "{{ homelab_dest }}/.env"
    mode: '0600' # Secure permissions for a file that might contain secrets
  when: ansible_connection != "local"

- name: Ensure AdGuard host work directory exists and has strict permissions
  ansible.builtin.file:
    path: "{{ homelab_dest }}/adguardhome/work"
    state: directory
    mode: '0700'
    recurse: yes

- name: Ensure AdGuard host conf directory exists and has strict permissions
  ansible.builtin.file:
    path: "{{ homelab_dest }}/adguardhome/conf"
    state: directory
    mode: '0700'
    recurse: yes

- name: Ensure kmod is installed (provides modprobe)
  ansible.builtin.apt:
    name: kmod
    state: present
  become: yes # kmod package installation requires root privileges

- name: Ensure wireguard-tools is installed
  ansible.builtin.apt:
    name: wireguard-tools
    state: present
    update_cache: yes
  become: yes

- name: Ensure wireguard kernel module is loaded on server
  community.general.modprobe:
    name: wireguard
    state: present
  become: yes
  when: ansible_connection != "local" # Skip in dev container

# Example for an Ansible role task file
# - name: Ensure IP forwarding is enabled on server # You likely have this already
#   ansible.posix.sysctl:
#     name: net.ipv4.ip_forward
#     value: '1'
#     sysctl_file: /etc/sysctl.d/99-docker.conf # Or similar
#     state: present
#     reload: yes
#   become: yes
#   when: ansible_connection != "local" # Skip in dev container

- name: Ensure net.ipv4.conf.all.src_valid_mark is enabled on server
  ansible.posix.sysctl:
    name: net.ipv4.conf.all.src_valid_mark
    value: '1'
    sysctl_file: /etc/sysctl.d/99-wireguard.conf # Or another suitable file like 99-docker.conf
    state: present
    reload: yes
  become: yes
  when: ansible_connection != "local" # Skip in dev container

- name: Allow WireGuard UDP port in UFW on server
  community.general.ufw:
    rule: allow
    port: "{{ wireguard_int_port | default('51820') }}" # Ensure 'wireguard_int_port' is defined in your Ansible vars
    proto: udp
    comment: "Allow WireGuard VPN"
  become: yes
  when: ansible_connection != "local" # Skip in dev container

- name: Ensure WireGuard config directory exists on server
  ansible.builtin.file:
    path: "{{ homelab_dest }}/wireguard/config"
    state: directory
    mode: '0750' # Restrictive permissions
  when: ansible_connection != "local" # Only for server deployment

- name: Ensure Media Suite directories exist and have correct permissions
  ansible.builtin.file:
    path: "{{ homelab_dest }}/{{ item }}"
    state: directory
    mode: '0755'
    owner: "{{ puid }}"
    group: "{{ pgid }}"
  become: true
  loop:
    - qbittorrent/config
    - prowlarr/config
    - sonarr/config
    - radarr/config
    - lidarr/config
    - bazarr/config
    - jellyseerr/config
    - jellyfin/config
    - media
    - media/downloads
    - media/movies
    - media/music
    - media/tv
    - media/audiobooks
    - /opt/prowlarr/config
    - /opt/gluetun
    - /opt/apprise/config

- name: Tear down any existing homelab stack
  community.docker.docker_compose_v2:
    project_src: "{{ homelab_dest }}"
    files: "{{ compose_files }}"
    state: absent
    remove_orphans: true
    remove_volumes: true
    env_files:
      - "{{ homelab_dest }}/.env"

- name: Bring up the full homelab stack
  community.docker.docker_compose_v2:
    project_src: "{{ homelab_dest }}"
    files: "{{ compose_files }}"
    state: present
    pull: always
    recreate: auto # Consider 'smart' or 'always' based on your needs
    env_files:
      - "{{ homelab_dest }}/.env"

# Post-deploy: fix in-container permissions so AdGuard will serve its UI
- name: Fix AdGuard “work” directory permissions in-container
  ansible.builtin.command: >
    docker exec adguardhome chmod 0700 /opt/adguardhome/work
  become: true
  when: inventory_hostname == 'homelab-server' # Or ansible_connection != "local" if 'homelab-server' isn't always the target

- name: Fix AdGuard “conf” directory permissions in-container
  ansible.builtin.command: >
    docker exec adguardhome chmod 0700 /opt/adguardhome/conf
  become: true
  when: inventory_hostname == 'homelab-server' # Or ansible_connection != "local" if 'homelab-server' isn't always the target

- name: Create Apprise config file from template
  ansible.builtin.template:
    src: apprise.yml.j2
    dest: "{{ homelab_dest }}/apprise/config/apprise.yml"
    owner: "{{ puid }}"
    group: "{{ pgid }}"
    mode: '0644'

- name: Ensure Apprise config directory exists
  ansible.builtin.file:
    path: "{{ homelab_dest }}/apprise/config"
    state: directory
    mode: '0755'
    owner: "{{ puid }}"
    group: "{{ pgid }}"
  become: true